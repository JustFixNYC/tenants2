import * as fs from 'fs';
import * as path from 'path';

import { DjangoChoices, filterDjangoChoices } from "../lib/common-data";

type CreateOptions = {
  exportLabels: boolean
};

const defaultOptions: CreateOptions = { exportLabels: true };

export type DjangoChoicesTypescriptConfig = {
  rootDir: string,
  files: DjangoChoicesTypescriptFileConfig[]
};

export type DjangoChoicesTypescriptFileConfig = {
  jsonFilename: string,
  enumName: string,
  exportLabels: boolean,
  filterOut?: RegExp|string[],
};

function replaceExt(filename: string, ext: string) {
  // https://stackoverflow.com/a/5953384
  return filename.substr(0, filename.lastIndexOf(".")) + ext;
}

export function createDjangoChoicesTypescriptFiles(
  config: DjangoChoicesTypescriptConfig,
  dryRun: boolean = false
) {
  config.files.forEach(fileConfig => {
    const infile = path.join(config.rootDir, fileConfig.jsonFilename);
    let choices = JSON.parse(fs.readFileSync(infile, {
      encoding: 'utf-8'
    })) as DjangoChoices;
    if (fileConfig.filterOut) {
      choices = filterDjangoChoices(choices, fileConfig.filterOut);
    }
    const ts = createDjangoChoicesTypescript(choices, fileConfig.enumName, {
      exportLabels: fileConfig.exportLabels
    });
    const outfilename = replaceExt(fileConfig.jsonFilename, '.ts');
    const outfile = path.join(config.rootDir, outfilename);
    if (!dryRun) {
      console.log(`Writing ${outfilename}.`);
      fs.writeFileSync(outfile, ts, { encoding: 'utf-8' });
    }
  });
}

export function createDjangoChoicesTypescript(
  choices: DjangoChoices,
  name: string,
  options: Partial<CreateOptions> = {}
): string {
  const { exportLabels } = Object.assign({}, defaultOptions, options);
  const lines = [
    `// This file was auto-generated by commondatabuilder.`,
    `// Please don't edit it.\n`,
    `export enum ${name} {`
  ];
  for (let choice of choices) {
    const name = choice[0];
    lines.push(`  ${name} = "${name}",`);
  }
  lines.push('}\n');
  lines.push(
    `export type ${name}Labels = {`,
    `  [k in ${name}]: string;`,
    `};\n`
  );
  if (exportLabels) {
    lines.push(
      `export function get${name}Labels(): ${name}Labels {`,
      `  return {`
    );
    for (let [name, label] of choices) {
      lines.push(`    ${name}: ${JSON.stringify(label)},`);
    }
    lines.push(
      '  };',
      '}\n'
    );
  }
  return lines.join('\n');
}
