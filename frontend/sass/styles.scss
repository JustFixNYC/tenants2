@charset "utf-8";
@import "./_util.scss";
@import "./_bulma-overrides.scss";
@import "../../node_modules/bulma/bulma.sass";
@import "../../node_modules/bulma-divider/dist/css/bulma-divider.sass";
@import "./_supertiny.scss";
@import "./_a11y.scss";
@import "./_safe-mode.scss";
@import "./_navbar.scss";
@import "./_modal.scss";
@import "./_issues.scss";
@import "./_product-icons.scss";
@import "./_landing-page.scss";
@import "./_autocomplete.scss";
@import "./_icon.scss";
@import "./_loading-overlay.scss";
@import "./_progress.scss";
@import "./_confetti.scss";
@import "./_currency-form-field.scss";
@import "./_data-driven-onboarding.scss";
@import "./_dev.scss";
@import "./_footer.scss";
@import "./_admin-conversations.scss";

// This variable defines how much of the page footer we want to 
// appear above the fold on all pages
$footer-offset: 12px;

// We want to give the page a column-based flex layout so we can
// have our safe mode UI be a sticky footer if needed.
body {
    align-items: stretch;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    min-height: 100vh;

    div#main {
        min-height: calc(100vh - #{$navbar-height} - #{$footer-offset});
    }
}

// Don't let any pre-rendered modal mess with our flex layout.
body > #prerendered-modal {
    position: absolute;
}

// If we're showing a pre-rendered modal, don't show the UI to disable safe mode.
// The user can disable it on the next/previous page outside of the modal.
body > #prerendered-modal ~ .safe-mode-disable {
    display: none;
}

// Bulma's default help text size is way too small, so we'll
// make it bigger.
.help {
  font-size: inherit;
}

.title.jf-page-steps-title {
  margin-bottom: 0.5em;
}

.jf-radio.radio + .jf-radio.radio {
    // This undoes Bulma's default .radio+.radio styling.
    margin-left: 0;
}

.jf-checkbox input, .jf-single-checkbox input, .jf-radio input {
    @include sr-only();
}

.jf-radio-symbol {
    box-shadow: 0 0 0 2px $primary-invert, 0 0 0 4px $border-hover;
    min-width: 1.2em;
    min-height: 1.2em;
    border-radius: 100%;
    margin: 0.3em 0.6em 0.3em 0.3em;
}

input:checked + .jf-radio-symbol {
    background-color: $primary;
}

input:focus + .jf-radio-symbol {
    outline: 2px dotted $border-hover;
    outline-offset: 5px;
}

input[type="number"] {
    max-width: 10em;
}

.jf-checkbox-symbol {
    min-width: 1.4em;
    min-height: 1.4em;
    margin: 0.3em 0.6em 0.3em 0.3em;
    border-radius: 2px;
    border: 2px solid $border-hover;
}

.checkbox + .jf-inset-field {
    padding-left: 1.4em + 0.3em + 0.6em;

    .label {
        font-weight: normal;
        color: $subtitle-color;
    }
}

.jf-slidedown-5em {
    animation-duration: 0.5s;
    animation-name: jf-slidedown-5em;
    overflow: hidden;
}

@keyframes jf-slidedown-5em {
    from { max-height: 0; }
    to { max-height: 5em; }
}

input:checked + .jf-checkbox-symbol {
    border-color: $primary;
    background-color: $primary;

    // Note that the only color present in the background
    // image needs to be $primary-invert. If $primary ever
    // changes drastically, the background image may need
    // to be changed!
    background-image: url('./img/correct8.png');
    background-image: url('./img/correct8.svg');

    background-repeat: no-repeat;
    background-position: 50%;
}

input:focus + .jf-checkbox-symbol {
    outline: 2px dotted $border-hover;
    outline-offset: 2px;
}

.jf-radio, .jf-checkbox, .jf-single-checkbox {
    display: flex;
    padding: 0.25em 0;
}

.jf-radio, .jf-checkbox {
    align-items: center;
}

.jf-single-checkbox {
    align-items: center;
}

// This class is largely empty; its main purpose is
// to wrap our label text so it breaks the flexbox layout of our
// <label> elements, which is an annoying hack. For more details,
// see https://github.com/JustFixNYC/tenants2/issues/260.
.jf-label-text {
    // This makes text wrap properly on IE11. For more details,
    // see https://stackoverflow.com/a/35113633/2422398.
    flex: 1;
}

.jf-loc-preview.box {
    padding: 8px;
}

.jf-loc-preview iframe[scrolling="no"] {
    display: block;
    width: 100%;
    // Note that the enclosed document inside the IFRAME needs to
    // have this max-height set; all scrolling will actually be
    // part of the enclosing document, rather than the IFRAME
    // wrapper, to work around the unusual behavior of iOS to
    // always set IFRAME dimensions to the contents of their
    // document.
    height: 300px;
}

// It's entirely possible that the a button's text
// may make it too wide for some mobile screens, so
// this mixin overrides Bulma's default button styling
// to allow the text to wrap.
@mixin button-text-wrap() {
    white-space: normal;
    height: auto;
    @media screen and (max-width: 400px) {
        line-height: normal;
    }
}

.button.jf-text-wrap {
    @include button-text-wrap();
}

.button.jf-is-extra-wide {
    padding-left: 2em;
    padding-right: 2em;
    @include button-text-wrap();
}

// A class used around groups of two buttons to
// put them on opposite sides of the screen.
.jf-two-buttons, .field.is-grouped.jf-two-buttons {
    justify-content: space-between;
    margin-top: 2rem;

    &.jf-two-buttons--vertical {
      // This centers and aligns the buttons vertically on a phone
      @include until($tablet) {
        flex-direction: column;
      }
    }


}

// This is used to "glue" content together, so that e.g. an icon doesn't
// word-wrap to be orphaned from the content it's associated with.
.jf-word-glue {
    white-space: pre;
}

.jf-is-scrollable-if-too-tall {
    max-height: 50vh;
    overflow-y: auto;
    -webkit-overflow-scrolling: touch;
    margin-bottom: 1em;
}

// Until https://github.com/jgthms/bulma/issues/886 is fixed,
// Bulma doesn't have fieldset/legend styling, so we'll provide
// our own.
fieldset {
    border: none;

    legend {
        font-weight: bold;
    }

    .field:not(:last-child) {
        margin-bottom: 0;
    }
}

$jf-biglist-counter-size: 45px;
$jf-biglist-counter-margin: 1em; 

.content ol.jf-biglist {
    & {
        list-style: none;
        counter-reset: jf-biglist-counter;
        margin-left: 0;
    }

    li {
        counter-increment: jf-biglist-counter;
        display: flex;
        align-items: center;
        padding: 1em;
        background: $light;
    }

    li > div.jf-biglist-counter {
        // Align counters to top of their container:
        margin-bottom: auto;
        & + div {
            margin-left: $jf-biglist-counter-margin;
            // Make guidelines box extend outside of parent div on mobile:
            @media screen and (max-width: $tablet) {
                .jf-sanitation-guidelines {
                    margin-left: calc(0px - #{$jf-biglist-counter-size} - #{$jf-biglist-counter-margin});
                }
            }
        }
    }

    li > div.jf-biglist-counter::before {
        content: counter(jf-biglist-counter);
        display: block;
        font-size: 30px;
        font-weight: bold;
        padding-left: 15px;
        width: $jf-biglist-counter-size;
        height: $jf-biglist-counter-size;
        overflow: hidden;
        border-radius: 100%;
        background-color: hsl(0, 0%, 29%);
        color: white;
    }
}

.jf-fadein-half-second {
    animation-duration: 0.5s;
    animation-name: jf-fadein;
}

@keyframes jf-fadein {
    from {
        opacity: 0;
    }

    to {
        opacity: 1.0;
    }
}

.jf-beta-tag:before {
    // We're assuming "beta" might be too jargony for our users, so we'll
    // use the word "new" instead.
    content: 'NEW';
}

.jf-beta-tag {
    display: inline-block;
    padding: 0 4px;
    margin-left: 0.5em;
    background-color: rgba(255, 255, 255, 0.75);
    color: black;
    font-size: 0.66rem;
}

html.jf-is-fullscreen-admin-page {
    #main > section {
        padding: 0;
    }

    // The following can be used to make the page have no left/right margins.
    // Right now this is overkill though and makes things hard to read on
    // really wide screens, so we're not going to use it.
    //.container {
    //    margin: 0;
    //    width: 100%;
    //    max-width: 100%;
    //}

    footer {
        display: none;
    }
}

.jf-secondary-cta {
    margin-top: 1rem;
    a {
      color: $primary !important;
      white-space: nowrap;
    }
  }

.jf-has-text-underline {
    text-decoration: underline;
}

.jf-moratorium-banner {
    .container {
        button.delete {
            &::before, &::after {
                background-color: $dark;
            }
        }
        p {
            margin: 0 2.5rem 0 0;
            a {
                text-decoration: underline;
                &:hover {
                    text-decoration: none;
                }
            }
        }
    }
}

.jf-covid-ehp-disclaimer {
    li {
        // Fix bullet spacing bug on Firefox:
        list-style-position: inside;
      }
}

.jf-sanitation-guidelines {
    .button.is-text {
        font-size: 0.9rem;
        height: 1.55rem;
        letter-spacing: 0.8px;
        &:hover, &:focus, &:active {
            background-color: transparent;
            text-decoration: none;
        }
    }
    @media screen and (max-width: 400px) {
        padding: 0.75rem;
    }
    .content {
        margin-top: 2.5rem;
        figure {
            margin: 0 auto;
        }
        .columns {
            margin-top: 1.5rem;
            margin-bottom: 1.5rem;

            p {
                line-height: 1.3;
            }
        }
    } 
}

.jf-heading-with-icon {
    display: flex;

    > i > svg {
        width: 1.5em;
        height: 1.5em;
    }

    @media (min-width: $jf-supertiny + 1px) {
        > i {
            padding-right: 0.5em;
        }

        > span {
            padding-top: 0.1em;
        }
    }

    @media (max-width: $jf-supertiny) {
        flex-direction: column;

        margin-top: -0.5em;

        > i {
            text-align: center;
        }

        > span {
            padding-top: 0.5em;
        }
    }
}
