@charset "utf-8";
@import "./_bulma-overrides.scss";
@import "../../node_modules/bulma/bulma.sass";
@import "./_safe-mode.scss";
@import "./_navbar.scss";
@import "./_modal.scss";
@import "./_issues.scss";
@import "./_autocomplete.scss";
@import "./_icon-link.scss";

// Bulma's button default focus styling is not easy
// to distinguish, so we'll make it stand out more here.
.button:focus {
    outline-width: 1px;
    outline-style: dashed;
    outline-offset: -5px;
}

.button.is-primary:focus {
    outline-color: $primary-invert;
}

.button.is-text:focus {
    outline-color: $text;
}

// We want the content of our pages to be aligned to
// the top of the page, rather than vertically centered
// (Bulma's heroic default).
.jf-hero.hero.is-fullheight .hero-body {
    align-items: flex-start;
}

// Sometimes we want non-interactive elements to be
// programmatically focusable; when this is the case, it's
// actually okay to not have any visual focus styling on
// the element, so we'll do that here. For more details, see:
// https://css-tricks.com/focus-styles-non-interactive-elements/
[data-jf-is-noninteractive] {
    outline: none;
}

// Anything with this mixin will only be perceivable to
// screen readers.
//
// It's taken from: https://webaim.org/techniques/css/invisiblecontent/
@mixin sr-only() {
    position: absolute;
    left: -10000px;
    top: auto;
    width: 1px;
    height: 1px;
    overflow: hidden;
}

// Bulma is supposed to support this, but at the moment it
// doesn't: https://github.com/jgthms/bulma/issues/150
//
// Until it does, we'll use our own class.
.jf-sr-only {
    @include sr-only();
}

.jf-radio.radio + .jf-radio.radio {
    // This undoes Bulma's default .radio+.radio styling.
    margin-left: 0;
}

.jf-checkbox input, .jf-single-checkbox input, .jf-radio input {
    @include sr-only();
}

.jf-radio-symbol {
    box-shadow: 0 0 0 2px $primary-invert, 0 0 0 4px $border-hover;
    min-width: 1.2em;
    min-height: 1.2em;
    border-radius: 100%;
    margin: 0.3em 0.6em 0.3em 0.3em;
}

input:checked + .jf-radio-symbol {
    background-color: $primary;
}

input:focus + .jf-radio-symbol {
    outline: 2px dotted $border-hover;
    outline-offset: 5px;
}

.jf-checkbox-symbol {
    min-width: 1.4em;
    min-height: 1.4em;
    margin: 0.3em 0.6em 0.3em 0.3em;
    border-radius: 2px;
    border: 2px solid $border-hover;
}

input:checked + .jf-checkbox-symbol {
    border-color: $primary;
    background-color: $primary;

    // Note that the only color present in the background
    // image needs to be $primary-invert. If $primary ever
    // changes drastically, the background image may need
    // to be changed!
    background-image: url('./img/correct8.png');
    background-image: url('./img/correct8.svg');

    background-repeat: no-repeat;
    background-position: 50%;
}

input:focus + .jf-checkbox-symbol {
    outline: 2px dotted $border-hover;
    outline-offset: 2px;
}

.jf-radio, .jf-checkbox, .jf-single-checkbox {
    display: flex;
    min-height: 2.25em;
}

.jf-radio, .jf-checkbox {
    align-items: center;
}

.jf-single-checkbox {
    align-items: center;
}

// This class is largely empty; its main purpose is
// to wrap our label text so it breaks the flexbox layout of our
// <label> elements, which is an annoying hack. For more details,
// see https://github.com/JustFixNYC/tenants2/issues/260.
.jf-label-text {
    // This makes text wrap properly on IE11. For more details,
    // see https://stackoverflow.com/a/35113633/2422398.
    flex: 1;
}

.jf-loc-preview iframe {
    width: 100%;
    min-height: 20em;
}

.jf-is-extra-wide {
    padding-left: 2em;
    padding-right: 2em;
}

// A class used around groups of two buttons to
// put them on opposite sides of the screen.
.jf-two-buttons, .field.is-grouped.jf-two-buttons {
    justify-content: space-between;
}

// This is used to "glue" content together, so that e.g. an icon doesn't
// word-wrap to be orphaned from the content it's associated with.
.jf-word-glue {
    white-space: pre;
}
