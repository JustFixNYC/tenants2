# This code was generated by the "hpcodegen" Django management command.

from typing import Optional, Union, List
import datetime
from enum import Enum
from dataclasses import dataclass, field
from hpaction.hotdocs import AnswerSet, enum2mc, enum2mc_opt, none2unans, AnswerType


class AccessPersonMC(Enum):
    ME = 'Me'
    SOMEONE_ELSE = 'Someone else'


class ActionTypeMS(Enum):
    # Sue my landlord for repairs
    REPAIRS = 'Repairs'
    # Sue my landlord for harassment
    HARASSMENT = 'Harassment'
    # Ask the court to waive the court fee ($45)
    FEE_WAIVER = 'Fee waiver'


class CourtCountyMC(Enum):
    BRONX = 'Bronx'
    KINGS = 'Kings'
    NEW_YORK = 'New York'
    QUEENS = 'Queens'
    RICHMOND = 'Richmond'


class CourtLocationMC(Enum):
    # Bronx County
    BRONX = 'Bronx'
    # Harlem Community Justice Center
    HARLEM = 'Harlem'
    # Kings County
    KINGS = 'Kings'
    # New York County
    NY = 'NY'
    # Queens County
    QUEENS = 'Queens'
    # Richmond County
    RICHMOND = 'Richmond'
    # Red Hook Community Justice Center
    REDHOOK = 'Redhook'


class HarassmentAllegationsMS(Enum):
    # used force or threatened to use force
    FORCE = 'force'
    # repeatedly interrupted or stopped essential services like heat, hot water or electricity
    STOPPED_SERVICE = 'stopped service'
    # had a violation issued against them by the City and an order that we must leave the apartment
    # (“vacate”) because the landlord failed to correct conditions that made the apartment or rooms
    # unfit for living in
    FAILED_TO_COMPLY = 'failed to comply'
    # repeatedly brought court cases for no good reasons
    SUED = 'sued'
    # removed my possessions from the apartment
    REMOVED_POSSESSIONS = 'removed possessions'
    # repeatedly did things or allowed others to do things that prevented me from being able to live
    # in the apartment in peace and comfort
    DISTURBED = 'disturbed'
    # removed the door to the apartment or made the lock to the apartment not work, or changed the
    # lock on the apartment door without giving me a key to the new lock
    CHANGED_LOCK = 'changed lock'


class LandlordAddressStateMC(Enum):
    ALABAMA = 'Alabama'
    ALASKA = 'Alaska'
    ARIZONA = 'Arizona'
    ARKANSAS = 'Arkansas'
    CALIFORNIA = 'California'
    COLORADO = 'Colorado'
    CONNECTICUT = 'Connecticut'
    DELAWARE = 'Delaware'
    DISTRICT_OF_COLUMBIA = 'District of Columbia'
    FLORIDA = 'Florida'
    GEORGIA = 'Georgia'
    HAWAII = 'Hawaii'
    IDAHO = 'Idaho'
    ILLINOIS = 'Illinois'
    INDIANA = 'Indiana'
    IOWA = 'Iowa'
    KANSAS = 'Kansas'
    KENTUCKY = 'Kentucky'
    LOUISIANA = 'Louisiana'
    MAINE = 'Maine'
    MARYLAND = 'Maryland'
    MASSACHUSETTS = 'Massachusetts'
    MICHIGAN = 'Michigan'
    MINNESOTA = 'Minnesota'
    MISSISSIPPI = 'Mississippi'
    MISSOURI = 'Missouri'
    MONTANA = 'Montana'
    NEBRASKA = 'Nebraska'
    NEVADA = 'Nevada'
    NEW_HAMPSHIRE = 'New Hampshire'
    NEW_JERSEY = 'New Jersey'
    NEW_MEXICO = 'New Mexico'
    NEW_YORK = 'New York'
    NORTH_CAROLINA = 'North Carolina'
    NORTH_DAKOTA = 'North Dakota'
    OHIO = 'Ohio'
    OKLAHOMA = 'Oklahoma'
    OREGON = 'Oregon'
    PENNSYLVANIA = 'Pennsylvania'
    RHODE_ISLAND = 'Rhode Island'
    SOUTH_CAROLINA = 'South Carolina'
    SOUTH_DAKOTA = 'South Dakota'
    TENNESSEE = 'Tennessee'
    TEXAS = 'Texas'
    UTAH = 'Utah'
    VERMONT = 'Vermont'
    VIRGINIA = 'Virginia'
    WASHINGTON = 'Washington'
    WEST_VIRGINIA = 'West Virginia'
    WISCONSIN = 'Wisconsin'
    WYOMING = 'Wyoming'


class LandlordEntityOrIndividualMC(Enum):
    INDIVIDUAL = 'Individual'
    COMPANY = 'Company'


class PayPeriodMC(Enum):
    WEEK = 'week'
    TWO_WEEKS = '2 weeks'
    HALF_MONTH = 'half-month'
    MONTH = 'month'
    OTHER = 'other'


class PriorHarassmentCaseMC(Enum):
    YES = 'Yes'
    NO = 'No'


class ServiceMethodMC(Enum):
    # By hand delivery
    PERSONAL = 'Personal'
    # By certified mail return receipt
    MAIL = 'Mail'


class ServiceMethodManagementCompanyMC(Enum):
    # Hand delivery
    PERSONAL = 'Personal'
    # Certified mail return receipt
    MAIL = 'Mail'


class TenantBoroughMC(Enum):
    BRONX = 'Bronx'
    BROOKLYN = 'Brooklyn'
    MANHATTAN = 'Manhattan'
    QUEENS = 'Queens'
    STATEN_ISLAND = 'Staten Island'


class TenantRepairsAllegationsMC(Enum):
    # I filed a complaint with HPD. HPD issued a Notice of Violation. More than 30 days have passed
    # since then. The landlord has not fixed the problem
    NOTICE_ISSUED = 'Notice issued'
    # I filed a complaint with HPD. More than 30 days have passed since then. HPD has not issued a
    # Notice of Violation.
    NO_NOTICE_ISSUED = 'No notice issued'


class AreaComplainedOfMC(Enum):
    MY_APARTMENT = 'My apartment'
    PUBLIC_AREA = 'Public area'


class WhichRoomMC(Enum):
    KITCHEN = 'Kitchen'
    BATHROOM = 'Bathroom'
    HALLWAY = 'Hallway'
    LIVING_ROOM = 'Living Room'
    DINING_ROOM = 'Dining Room'
    BEDROOM_1 = 'Bedroom 1'
    BEDROOM_2 = 'Bedroom 2'
    BEDROOM_3 = 'Bedroom 3'
    BEDROOM_4 = 'Bedroom 4'
    STAIRWAY = 'Stairway'
    PORCHBALCONY = 'Porch/Balcony'
    FRONT_ENTRANCE = 'Front Entrance'
    LOBBY = 'Lobby'
    MAILBOX_AREA = 'Mailbox Area'
    LAUNDRY_ROOM = 'Laundry Room'
    YARD = 'Yard'
    PARKING_AREA = 'Parking Area'
    STORAGE_ROOM = 'Storage Room'
    ALL_ROOMS = 'All Rooms'


ManagementCompanyAddressStateMC = LandlordAddressStateMC

PriorRepairsCaseMC = PriorHarassmentCaseMC

TenantAddressStateMC = LandlordAddressStateMC


@dataclass
class TenantChild:
    # Child's full name
    tenant_child_name_te: Optional[str] = None

    # Birth date (month/date/year)
    tenant_child_dob: Optional[datetime.date] = None

    @staticmethod
    def add_to_answer_set(values: List['TenantChild'], result: AnswerSet) -> None:
        result.add('Tenant child name TE', [
            none2unans(v.tenant_child_name_te, AnswerType.TEXT)
            for v in values
        ])
        result.add('Tenant child DOB', [
            none2unans(v.tenant_child_dob, AnswerType.DATE)
            for v in values
        ])


@dataclass
class TenantComplaints:
    # Location of the problem
    area_complained_of_mc: Optional[AreaComplainedOfMC] = None

    # Which room?
    which_room_mc: Optional[WhichRoomMC] = None

    # Condition(s) -- Be specific
    conditions_complained_of_te: Optional[str] = None

    @staticmethod
    def add_to_answer_set(values: List['TenantComplaints'], result: AnswerSet) -> None:
        result.add('Area complained of MC', [
            enum2mc(none2unans(v.area_complained_of_mc, AnswerType.MC))
            for v in values
        ])
        result.add('Which room MC', [
            enum2mc(none2unans(v.which_room_mc, AnswerType.MC))
            for v in values
        ])
        result.add('Conditions complained of TE', [
            none2unans(v.conditions_complained_of_te, AnswerType.TEXT)
            for v in values
        ])


@dataclass
class HPActionVariables:
    # Full name
    access_person_te: Optional[str] = None

    # Phone
    access_person_phone_te: Optional[str] = None

    #  First, you have to complete this sentence: «.b»“My case is good and worthwhile
    # because_______”.«.be» «.i» You should fill in something like “my landlord has broken the law
    # by not making repairs to my apartment and I have evidence to show this”  or “my landlord has
    # broken the law by repeatedly harassing me.”  A simple sentence is all you need here.«.ie»
    cause_of_action_description_te: Optional[str] = None

    # Explain how the landlord or someone on the landlord's behalf has harassed you. Be as specific
    # as you can and be sure to give the date these things happened. (If you cannot remember the
    # exact date, give the month and year.)
    harassment_details_te: Optional[str] = None

    # City
    landlord_address_city_te: Optional[str] = None

    # Landlord's street address
    landlord_address_street_te: Optional[str] = None

    # Zip
    landlord_address_zip_te: Optional[str] = None

    # Contact person first name
    landlord_contact_person_name_first_te: Optional[str] = None

    # Last name
    landlord_contact_person_name_last_te: Optional[str] = None

    # Name of landlord (you may wish to look this up on the HPD website to make sure you get the
    # name correct)
    landlord_entity_name_te: Optional[str] = None

    # First name
    landlord_name_first_te: Optional[str] = None

    # Last name
    landlord_name_last_te: Optional[str] = None

    # City
    management_company_address_city_te: Optional[str] = None

    # Management company's street address
    management_company_address_street_te: Optional[str] = None

    # Zip
    management_company_address_zip_te: Optional[str] = None

    # Management company name
    management_company_name_te: Optional[str] = None

    # Other pay period
    other_pay_period_te: Optional[str] = None

    # Please provide the court case number (the “index number”) and/or the date(s) of the earlier
    # case(s).
    prior_relief_sought_case_numbers_and_dates_te: Optional[str] = None

    # Please complete this sentence: «.b» I have applied for a fee waiver before, but I am making
    # this application because _____________.«.be»  «.i»If your earlier application was denied, you
    # can write something like "my circumstances have changed and I cannot afford the filing fee."
    # If your earlier application was granted, you can write "my prior application was granted and I
    # cannot afford the filing fee."«.ie»
    reason_for_further_application_te: Optional[str] = None

    # Name of person you handed the documents to «.i»(If you  or someone else delivers the documents
    # by hand, you’ll need to write down the name of the person you gave them to and the address
    # where you did that.  If you do not know yet who will receive them, you can leave this
    # blank.)«.ie»
    served_person_te: Optional[str] = None

    # Name of person you handed the documents to «.i»(If you  or someone else delivers the documents
    # by hand, you’ll need to write down the name of the person you gave them to and the address
    # where you did that.  If you do not know yet who will receive them, you can leave this
    # blank.)«.ie»
    served_person_management_company_te: Optional[str] = None

    # Full address of person mailing the documents to HPD (number and street, city, state, zip)
    server_address_full_hpd_te: Optional[str] = None

    # Full address of person mailing or delivering the documents (number and street, city, state,
    # zip)
    server_address_full_te: Optional[str] = None

    # Full address of person mailing or delivering the documents (number and street, city, state,
    # zip)
    server_address_full_management_company_te: Optional[str] = None

    # Full name of person mailing the documents to HPD
    server_name_full_hpd_te: Optional[str] = None

    # Full name of person mailing or delivering the documents. (If it was not you, put the right
    # name and address below.)
    server_name_full_te: Optional[str] = None

    # Full name of person mailing or delivering the documents. (If it was not you, put the right
    # name and address below.)
    server_name_full_management_company_te: Optional[str] = None

    # Full address where you delivered the documents (number and street, city, state, zip)
    service_address_full_te: Optional[str] = None

    # Full address where you delivered the documents (number and street, city, state, zip)
    service_address_full_management_company_te: Optional[str] = None

    # Apt. No.
    tenant_address_apt_no_te: Optional[str] = None

    # City
    tenant_address_city_te: Optional[str] = None

    # Your street address
    tenant_address_street_te: Optional[str] = None

    # Zip
    tenant_address_zip_te: Optional[str] = None

    # What is the source of your income?«.i» (For example, employment, social security, pension,
    # child support, etc.  You can list more than one source.)«.ie»
    tenant_income_source_te: Optional[str] = None

    # Your first name
    tenant_name_first_te: Optional[str] = None

    # Your last name
    tenant_name_last_te: Optional[str] = None

    # Your middle name (optional)
    tenant_name_middle_te: Optional[str] = None

    # Home/cell phone
    tenant_phone_home_te: Optional[str] = None

    # Business or work phone
    tenant_phone_work_te: Optional[str] = None

    # List any major property that you own, like a car or a valuable item, and the value of that
    # property.
    tenant_property_owned_te: Optional[str] = None

    # Date served
    service_date_da: Optional[datetime.date] = None

    service_date_hpd_da: Optional[datetime.date] = None

    # Date served
    service_date_management_company_da: Optional[datetime.date] = None

    conditions_counter_nu: Optional[Union[str, float]] = None

    # What floor do you live on?
    tenant_address_floor_nu: Optional[Union[str, float]] = None

    # How many children under 6 live in the apartment where the problem is? If none, please enter 0.
    tenant_children_under_6_nu: Optional[Union[str, float]] = None

    # What is your household income?  You can list the amount by week, 2 weeks, month, etc.  Just be
    # sure to check the box for the period you listed.
    tenant_income_nu: Optional[Union[str, float]] = None

    # «.i»The judge could fine your landlord, though they do not always do that.«.ie»«.b» Do you
    # want the judge to fine your landlord?«.be»
    fine_landlord_harassment_tf: Optional[bool] = None

    flag_tf: Optional[bool] = None

    # Is there a management company or managing agent for the landlord that you also want to sue?
    management_company_to_be_sued_tf: Optional[bool] = None

    # Are there more than two apartments in your building?
    more_than_2_apartments_in_building_tf: Optional[bool] = None

    # Is there more than one family living in each apartment?
    more_than_one_family_per_apartment_tf: Optional[bool] = None

    # Have you asked the court to waive the court fee before in another case?
    previous_application_tf: Optional[bool] = None

    # Have you brought a case in housing court to get repairs to this apartment or building before
    # this case?
    prior_relief_sought_tf: Optional[bool] = None

    # «.b»Are the conditions urgent and dangerous?«.be»«.i» If the problems in your apartment are
    # urgent and dangerous to you or your family’s health or safety, you can ask the court to go
    # forward without a city inspection.  This means that the City will not send someone to inspect
    # the apartment. The City inspection report could be useful evidence in your case. Is the
    # problem urgent, and do you want to skip the inspection?«.ie»
    problem_is_urgent_tf: Optional[bool] = None

    # Do you receive public assistance benefits, such as cash benefits, rent assistance, food stamps
    # or Medicaid?
    tenant_receives_public_assistance_tf: Optional[bool] = None

    # Who will be home to let the City housing inspector in?
    access_person_mc: Optional[AccessPersonMC] = None

    # «.b»What would you like to do?«.be»  (Choose all that apply.)
    action_type_ms: Optional[List[ActionTypeMS]] = None

    # In what jurisdiction/county will you be filing?
    court_county_mc: Optional[CourtCountyMC] = None

    # Which Court will you be filing in?
    court_location_mc: Optional[CourtLocationMC] = None

    # «.i»Choose any of the following that have happened.«.ie» The landlord, or someone acting on
    # the landlord’s behalf, has:
    harassment_allegations_ms: Optional[List[HarassmentAllegationsMS]] = None

    # State
    landlord_address_state_mc: Optional[LandlordAddressStateMC] = None

    # Is your landlord an individual or a company?
    landlord_entity_or_individual_mc: Optional[LandlordEntityOrIndividualMC] = None

    # State
    management_company_address_state_mc: Optional[ManagementCompanyAddressStateMC] = None

    # In what period?
    pay_period_mc: Optional[PayPeriodMC] = None

    # Have you brought a case in housing court against this landlord for harassment before this
    # case?
    prior_harassment_case_mc: Optional[PriorHarassmentCaseMC] = None

    # Have you brought a case in housing court to get repairs to this apartment or building before
    # this case?
    prior_repairs_case_mc: Optional[PriorRepairsCaseMC] = None

    # How do you plan to serve the documents?
    service_method_mc: Optional[ServiceMethodMC] = None

    # How do you plan to serve the documents?
    service_method_management_company_mc: Optional[ServiceMethodManagementCompanyMC] = None

    # State
    tenant_address_state_mc: Optional[TenantAddressStateMC] = None

    # Borough
    tenant_borough_mc: Optional[TenantBoroughMC] = None

    # Have you made a complaint to the City’s Department of Housing Preservation and Development
    # (HPD)? «.i» It is not required, but check the box if you have. (You can check one or both or
    # none.)«.ie»  To find out whether HPD issued a Notice of Violation, go to HPD's website: «.w
    # "http://www1.nyc.gov/site/hpd/about/hpdonline.page"»HPDONLINE«.we».  If you do not know how to
    # answer this question, you can skip it.
    tenant_repairs_allegations_mc: Optional[TenantRepairsAllegationsMC] = None

    tenant_child_list: List[TenantChild] = field(default_factory=list)

    tenant_complaints_list: List[TenantComplaints] = field(default_factory=list)

    def to_answer_set(self) -> AnswerSet:
        result = AnswerSet()
        result.add_opt('Access person TE',
                       self.access_person_te)
        result.add_opt('Access person phone TE',
                       self.access_person_phone_te)
        result.add_opt('Cause of action description TE',
                       self.cause_of_action_description_te)
        result.add_opt('Harassment details TE',
                       self.harassment_details_te)
        result.add_opt('Landlord address city TE',
                       self.landlord_address_city_te)
        result.add_opt('Landlord address street TE',
                       self.landlord_address_street_te)
        result.add_opt('Landlord address zip TE',
                       self.landlord_address_zip_te)
        result.add_opt('Landlord contact person name first TE',
                       self.landlord_contact_person_name_first_te)
        result.add_opt('Landlord contact person name last TE',
                       self.landlord_contact_person_name_last_te)
        result.add_opt('Landlord entity name TE',
                       self.landlord_entity_name_te)
        result.add_opt('Landlord name first TE',
                       self.landlord_name_first_te)
        result.add_opt('Landlord name last TE',
                       self.landlord_name_last_te)
        result.add_opt('Management company address city TE',
                       self.management_company_address_city_te)
        result.add_opt('Management company address street TE',
                       self.management_company_address_street_te)
        result.add_opt('Management company address zip TE',
                       self.management_company_address_zip_te)
        result.add_opt('Management company name TE',
                       self.management_company_name_te)
        result.add_opt('Other pay period TE',
                       self.other_pay_period_te)
        result.add_opt('Prior relief sought case numbers and dates TE',
                       self.prior_relief_sought_case_numbers_and_dates_te)
        result.add_opt('Reason for further application TE',
                       self.reason_for_further_application_te)
        result.add_opt('Served person TE',
                       self.served_person_te)
        result.add_opt('Served person management company TE',
                       self.served_person_management_company_te)
        result.add_opt('Server address full HPD TE',
                       self.server_address_full_hpd_te)
        result.add_opt('Server address full TE',
                       self.server_address_full_te)
        result.add_opt('Server address full management company TE',
                       self.server_address_full_management_company_te)
        result.add_opt('Server name full HPD TE',
                       self.server_name_full_hpd_te)
        result.add_opt('Server name full TE',
                       self.server_name_full_te)
        result.add_opt('Server name full management company TE',
                       self.server_name_full_management_company_te)
        result.add_opt('Service address full TE',
                       self.service_address_full_te)
        result.add_opt('Service address full management company TE',
                       self.service_address_full_management_company_te)
        result.add_opt('Tenant address apt no TE',
                       self.tenant_address_apt_no_te)
        result.add_opt('Tenant address city TE',
                       self.tenant_address_city_te)
        result.add_opt('Tenant address street TE',
                       self.tenant_address_street_te)
        result.add_opt('Tenant address zip TE',
                       self.tenant_address_zip_te)
        result.add_opt('Tenant income source TE',
                       self.tenant_income_source_te)
        result.add_opt('Tenant name first TE',
                       self.tenant_name_first_te)
        result.add_opt('Tenant name last TE',
                       self.tenant_name_last_te)
        result.add_opt('Tenant name middle TE',
                       self.tenant_name_middle_te)
        result.add_opt('Tenant phone home TE',
                       self.tenant_phone_home_te)
        result.add_opt('Tenant phone work TE',
                       self.tenant_phone_work_te)
        result.add_opt('Tenant property owned TE',
                       self.tenant_property_owned_te)
        result.add_opt('Service date DA',
                       self.service_date_da)
        result.add_opt('Service date HPD DA',
                       self.service_date_hpd_da)
        result.add_opt('Service date management company DA',
                       self.service_date_management_company_da)
        result.add_opt('Conditions counter NU',
                       self.conditions_counter_nu)
        result.add_opt('Tenant address floor NU',
                       self.tenant_address_floor_nu)
        result.add_opt('Tenant children under 6 NU',
                       self.tenant_children_under_6_nu)
        result.add_opt('Tenant income NU',
                       self.tenant_income_nu)
        result.add_opt('Fine landlord harassment TF',
                       self.fine_landlord_harassment_tf)
        result.add_opt('Flag TF',
                       self.flag_tf)
        result.add_opt('Management company to be sued TF',
                       self.management_company_to_be_sued_tf)
        result.add_opt('More than 2 apartments in building TF',
                       self.more_than_2_apartments_in_building_tf)
        result.add_opt('More than one family per apartment TF',
                       self.more_than_one_family_per_apartment_tf)
        result.add_opt('Previous application TF',
                       self.previous_application_tf)
        result.add_opt('Prior relief sought TF',
                       self.prior_relief_sought_tf)
        result.add_opt('Problem is urgent TF',
                       self.problem_is_urgent_tf)
        result.add_opt('Tenant receives public assistance TF',
                       self.tenant_receives_public_assistance_tf)
        result.add_opt('Access person MC',
                       enum2mc_opt(self.access_person_mc))
        result.add_opt('Action type MS',
                       enum2mc_opt(self.action_type_ms))
        result.add_opt('Court county MC',
                       enum2mc_opt(self.court_county_mc))
        result.add_opt('Court location MC',
                       enum2mc_opt(self.court_location_mc))
        result.add_opt('Harassment allegations MS',
                       enum2mc_opt(self.harassment_allegations_ms))
        result.add_opt('Landlord address state MC',
                       enum2mc_opt(self.landlord_address_state_mc))
        result.add_opt('Landlord entity or individual MC',
                       enum2mc_opt(self.landlord_entity_or_individual_mc))
        result.add_opt('Management company address state MC',
                       enum2mc_opt(self.management_company_address_state_mc))
        result.add_opt('Pay period MC',
                       enum2mc_opt(self.pay_period_mc))
        result.add_opt('Prior harassment case MC',
                       enum2mc_opt(self.prior_harassment_case_mc))
        result.add_opt('Prior repairs case MC',
                       enum2mc_opt(self.prior_repairs_case_mc))
        result.add_opt('Service method MC',
                       enum2mc_opt(self.service_method_mc))
        result.add_opt('Service method management company MC',
                       enum2mc_opt(self.service_method_management_company_mc))
        result.add_opt('Tenant address state MC',
                       enum2mc_opt(self.tenant_address_state_mc))
        result.add_opt('Tenant borough MC',
                       enum2mc_opt(self.tenant_borough_mc))
        result.add_opt('Tenant repairs allegations MC',
                       enum2mc_opt(self.tenant_repairs_allegations_mc))
        if self.tenant_child_list:
            TenantChild.add_to_answer_set(self.tenant_child_list, result)
        if self.tenant_complaints_list:
            TenantComplaints.add_to_answer_set(self.tenant_complaints_list, result)
        return result
