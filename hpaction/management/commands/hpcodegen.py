from pathlib import Path
import abc
from django.core.management.base import BaseCommand

from project.justfix_environment import BASE_DIR
from hpaction.hotdocs_cmp import HDComponentLibrary
from hpaction.codegen import PythonCodeGenerator


MASTER_CMP_PATH = BASE_DIR / "hpaction" / "hotdocs-data" / "Master.cmp"


class GeneratedFile(abc.ABC):
    @property
    @abc.abstractmethod
    def path(self) -> Path:
        ...  # pragma: no cover

    @property
    @abc.abstractmethod
    def cmd_file(self) -> str:
        ...  # pragma: no cover

    @abc.abstractmethod
    def generate(self) -> str:
        ...  # pragma: no cover

    @property
    def cmd_name(self) -> str:
        return Path(self.cmd_file).stem

    @property
    def disclaimer(self) -> str:
        return f'This code was generated by the "{self.cmd_name}" Django management command.'

    def is_up_to_date(self) -> bool:
        return self.generate() == self.path.read_text()

    def ensure_is_up_to_date(self) -> None:
        if not self.is_up_to_date():
            raise AssertionError(  # pragma: no cover
                f"{self.path} is out of date, please re-run the "
                f"'{self.cmd_name}' management command"
            )

    def generate_and_write(self) -> None:
        print(f"Outputting Python code to {self.path.name}.")
        with self.path.open("w", newline="\n", encoding="utf-8") as f:
            f.write(self.generate())


class HPActionVarsFile(GeneratedFile):
    path = BASE_DIR / "hpaction" / "hpactionvars.py"

    cmd_file = __file__

    def generate(self) -> str:
        lib = HDComponentLibrary(MASTER_CMP_PATH)
        code = PythonCodeGenerator(lib, "HPActionVariables")
        return f"# {self.disclaimer}\n\n" + code.getvalue()


class Command(BaseCommand):
    help = f"Parse {MASTER_CMP_PATH.name} and generate code."

    def handle(self, *args, **options) -> None:
        HPActionVarsFile().generate_and_write()
