from datetime import date, timedelta
from freezegun import freeze_time

from loc.forms import AccessDatesForm, LetterRequestForm, LandlordDetailsFormV2
from loc.models import LetterRequest, LOC_CHANGE_LEEWAY
from .factories import create_user_with_all_info


def test_landlord_details_form_restricts_name_length():
    form = LandlordDetailsFormV2(data={
        'name': 'z' * 41
    })
    form.full_clean()
    assert form.errors['name'] == [
        'Ensure this value has at most 40 characters (it has 41).'
    ]


def test_form_raises_error_if_dates_are_same():
    form = AccessDatesForm(data={
        'date1': '2018-01-01',
        'date2': '2018-01-01'
    })
    form.full_clean()
    assert form.errors == {
        '__all__': ['Please ensure all the dates are different.']
    }


@freeze_time("2018-01-01")
def test_form_raises_error_if_dates_are_too_soon():
    form = AccessDatesForm(data={
        'date1': '2018-01-02',
        'date2': '2018-01-03'
    })
    form.full_clean()
    all_errors = form.errors['__all__']
    assert len(all_errors) == 1
    assert 'Please ensure all dates are at least ' in all_errors[0]


@freeze_time("2017-12-01")
def test_get_cleaned_dates_works():
    form = AccessDatesForm(data={
        'date1': '2018-01-01',
        'date2': '2019-02-02'
    })
    form.full_clean()
    assert form.errors == {}
    assert form.get_cleaned_dates() == [date(2018, 1, 1), date(2019, 2, 2)]


def save_letter_request_form(
    data={'mail_choice': 'WE_WILL_MAIL'},
    form_class=LetterRequestForm,
    instance=None
):
    if instance is None:
        user = create_user_with_all_info()
        instance = LetterRequest(user=user)
    form = form_class(data=data, instance=instance)
    form.full_clean()
    assert form.is_valid() is True
    form.save()

    return form


def test_letter_request_works(db, allow_lambda_http):
    with freeze_time('2018-01-02') as time:
        form = save_letter_request_form()
        data = form.data
        lr = form.instance

        assert 'NYC Admin Code' in lr.html_content
        assert 'generated by the user' in lr.html_content
        assert 'using git revision' in lr.html_content

        time.tick(delta=timedelta(seconds=1) + LOC_CHANGE_LEEWAY)

        form = LetterRequestForm(data=data, instance=lr)
        form.full_clean()
        assert form.is_valid() is False
        assert 'Your letter is already being mailed!' in form.errors['__all__']
